
BMP_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e8c  08003e8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000070  08003f04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08003f04  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d126  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  0002d1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020620  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7f4  00000000  00000000  00050c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be09a  00000000  00000000  0005e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003358  00000000  00000000  0011c538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003db0 	.word	0x08003db0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003db0 	.word	0x08003db0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <digital_write>:
#include "basicfunctions.h"

void digital_write(GPIO_TypeDef* type,uint16_t pin, bool state)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
 80005c0:	4613      	mov	r3, r2
 80005c2:	707b      	strb	r3, [r7, #1]
	// pin - GPIO_Pin_0
	// bool state - '1' or '0'
	/*char str1[]= "a";
	char str2[]= "b";
	char* str3 = str1 + str2;*/
	printf("hello world");
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <digital_write+0x2c>)
 80005c6:	f002 fc65 	bl	8002e94 <iprintf>

	HAL_GPIO_WritePin(type,pin,state);
 80005ca:	787a      	ldrb	r2, [r7, #1]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	4619      	mov	r1, r3
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 fe9b 	bl	800130c <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	08003dc8 	.word	0x08003dc8

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb80 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8e0 	bl	80007b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f884 	bl	8000700 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f8ac 	bl	8000754 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	digital_write(GPIOB,LD1_Pin,1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x40>)
 8000602:	f7ff ffd7 	bl	80005b4 <digital_write>
	HAL_Delay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 fbe1 	bl	8000dd0 <HAL_Delay>
	digital_write(GPIOB,LD1_Pin,0);
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <main+0x40>)
 8000614:	f7ff ffce 	bl	80005b4 <digital_write>
	HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fbd8 	bl	8000dd0 <HAL_Delay>
	digital_write(GPIOB,LD1_Pin,1);
 8000620:	e7ec      	b.n	80005fc <main+0x18>
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc24 	bl	8002e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <SystemClock_Config+0xd4>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800069c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fb7a 	bl	8001dac <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006be:	f000 f927 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2103      	movs	r1, #3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff76 	bl	80015d0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ea:	f000 f911 	bl	8000910 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART3_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART3_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART3_UART_Init+0x4c>)
 8000738:	f001 fdbc 	bl	80022b4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8e5 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40004800 	.word	0x40004800

08000754 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000762:	2206      	movs	r2, #6
 8000764:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000768:	2202      	movs	r2, #2
 800076a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000774:	2202      	movs	r2, #2
 8000776:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078c:	2201      	movs	r2, #1
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000792:	2201      	movs	r2, #1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079e:	f000 fdce 	bl	800133e <HAL_PCD_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f8b2 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000d0 	.word	0x200000d0

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4b      	ldr	r2, [pc, #300]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3d      	ldr	r2, [pc, #244]	; (8000900 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a36      	ldr	r2, [pc, #216]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	; 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x150>)
 800087a:	f000 fd47 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x154>)
 8000884:	f000 fd42 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x158>)
 80008a0:	f000 fba0 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x150>)
 80008be:	f000 fb91 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x154>)
 80008da:	f000 fb83 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x154>)
 80008f2:	f000 fb77 	bl	8000fe4 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e4:	f000 fafe 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004800 	.word	0x40004800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b098      	sub	sp, #96	; 0x60
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	223c      	movs	r2, #60	; 0x3c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fa31 	bl	8002e84 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a2a:	d14d      	bne.n	8000ac8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 ffe9 	bl	8001a10 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000a44:	f7ff ff64 	bl	8000910 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a76:	230a      	movs	r3, #10
 8000a78:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <HAL_PCD_MspInit+0xd8>)
 8000a82:	f000 faaf 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <HAL_PCD_MspInit+0xd8>)
 8000a9c:	f000 faa2 	bl	8000fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aaa:	6353      	str	r3, [r2, #52]	; 0x34
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6453      	str	r3, [r2, #68]	; 0x44
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_PCD_MspInit+0xd4>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3760      	adds	r7, #96	; 0x60
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f934 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
  }

  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f002 f8fa 	bl	8002e30 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20040000 	.word	0x20040000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200005dc 	.word	0x200005dc
 8000c70:	200005f8 	.word	0x200005f8

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 f8b9 	bl	8002e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc8b 	bl	80005e4 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cdc:	08003e94 	.word	0x08003e94
  ldr r2, =_sbss
 8000ce0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ce4:	200005f4 	.word	0x200005f4

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f931 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fdfc 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f93b 	bl	8000fca <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f911 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	200005e0 	.word	0x200005e0

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200005e0 	.word	0x200005e0

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e165      	b.n	80012cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8154 	bne.w	80012c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ae 	beq.w	80012c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5c      	ldr	r2, [pc, #368]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <HAL_GPIO_Init+0x300>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x308>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x310>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x20a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x206>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a49      	ldr	r2, [pc, #292]	; (8001304 <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x202>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x324>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_GPIO_Init+0x324>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x324>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_GPIO_Init+0x324>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae96 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800133e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001340:	b08f      	sub	sp, #60	; 0x3c
 8001342:	af0a      	add	r7, sp, #40	; 0x28
 8001344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e116      	b.n	800157e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fb46 	bl	80009fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fab3 	bl	80028fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	687e      	ldr	r6, [r7, #4]
 800139c:	466d      	mov	r5, sp
 800139e:	f106 0410 	add.w	r4, r6, #16
 80013a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b2:	1d33      	adds	r3, r6, #4
 80013b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f001 fa3e 	bl	8002838 <USB_CoreInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0d7      	b.n	800157e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 faa1 	bl	800291c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e04a      	b.n	8001476 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	333d      	adds	r3, #61	; 0x3d
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	333c      	adds	r3, #60	; 0x3c
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	b298      	uxth	r0, r3
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3344      	adds	r3, #68	; 0x44
 800141c:	4602      	mov	r2, r0
 800141e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3340      	adds	r3, #64	; 0x40
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3348      	adds	r3, #72	; 0x48
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	334c      	adds	r3, #76	; 0x4c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3354      	adds	r3, #84	; 0x54
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3af      	bcc.n	80013e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e044      	b.n	8001510 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3301      	adds	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d3b5      	bcc.n	8001486 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	687e      	ldr	r6, [r7, #4]
 8001522:	466d      	mov	r5, sp
 8001524:	f106 0410 	add.w	r4, r6, #16
 8001528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001534:	e885 0003 	stmia.w	r5, {r0, r1}
 8001538:	1d33      	adds	r3, r6, #4
 800153a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f001 fa39 	bl	80029b4 <USB_DevInit>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e014      	b.n	800157e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2b01      	cmp	r3, #1
 800156a:	d102      	bne.n	8001572 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f80a 	bl	8001586 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f001 fbf7 	bl	8002d6a <USB_DevDisconnect>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001586 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	f043 0303 	orr.w	r3, r3, #3
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0cc      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d90c      	bls.n	800160c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0b8      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800162e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	494d      	ldr	r1, [pc, #308]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d044      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e067      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fb7a 	bl	8000db8 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fb76 	bl	8000db8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e04f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d20c      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e032      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001756:	f000 f821 	bl	800179c <HAL_RCC_GetSysClockFreq>
 800175a:	4602      	mov	r2, r0
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	490a      	ldr	r1, [pc, #40]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	5ccb      	ldrb	r3, [r1, r3]
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fada 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00
 800178c:	40023800 	.word	0x40023800
 8001790:	08003dd4 	.word	0x08003dd4
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a0:	b094      	sub	sp, #80	; 0x50
 80017a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
 80017a8:	2300      	movs	r3, #0
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017ac:	2300      	movs	r3, #0
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d00d      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x40>
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	f200 80e1 	bhi.w	8001988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ce:	e0db      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017d4:	e0db      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017da:	e0d8      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e6:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	2200      	movs	r2, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80017fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
 800180a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800180e:	4622      	mov	r2, r4
 8001810:	462b      	mov	r3, r5
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0159      	lsls	r1, r3, #5
 800181c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001820:	0150      	lsls	r0, r2, #5
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4621      	mov	r1, r4
 8001828:	1a51      	subs	r1, r2, r1
 800182a:	6139      	str	r1, [r7, #16]
 800182c:	4629      	mov	r1, r5
 800182e:	eb63 0301 	sbc.w	r3, r3, r1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001840:	4659      	mov	r1, fp
 8001842:	018b      	lsls	r3, r1, #6
 8001844:	4651      	mov	r1, sl
 8001846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800184a:	4651      	mov	r1, sl
 800184c:	018a      	lsls	r2, r1, #6
 800184e:	4651      	mov	r1, sl
 8001850:	ebb2 0801 	subs.w	r8, r2, r1
 8001854:	4659      	mov	r1, fp
 8001856:	eb63 0901 	sbc.w	r9, r3, r1
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800186a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800186e:	4690      	mov	r8, r2
 8001870:	4699      	mov	r9, r3
 8001872:	4623      	mov	r3, r4
 8001874:	eb18 0303 	adds.w	r3, r8, r3
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	462b      	mov	r3, r5
 800187c:	eb49 0303 	adc.w	r3, r9, r3
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800188e:	4629      	mov	r1, r5
 8001890:	024b      	lsls	r3, r1, #9
 8001892:	4621      	mov	r1, r4
 8001894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001898:	4621      	mov	r1, r4
 800189a:	024a      	lsls	r2, r1, #9
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	2200      	movs	r2, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018ac:	f7fe fd00 	bl	80002b0 <__aeabi_uldivmod>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4613      	mov	r3, r2
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b8:	e058      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	2200      	movs	r2, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	4611      	mov	r1, r2
 80018c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
 80018d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018d4:	4642      	mov	r2, r8
 80018d6:	464b      	mov	r3, r9
 80018d8:	f04f 0000 	mov.w	r0, #0
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	0159      	lsls	r1, r3, #5
 80018e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e6:	0150      	lsls	r0, r2, #5
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4641      	mov	r1, r8
 80018ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80018f2:	4649      	mov	r1, r9
 80018f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800190c:	ebb2 040a 	subs.w	r4, r2, sl
 8001910:	eb63 050b 	sbc.w	r5, r3, fp
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	00eb      	lsls	r3, r5, #3
 800191e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001922:	00e2      	lsls	r2, r4, #3
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	4643      	mov	r3, r8
 800192a:	18e3      	adds	r3, r4, r3
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	464b      	mov	r3, r9
 8001930:	eb45 0303 	adc.w	r3, r5, r3
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001942:	4629      	mov	r1, r5
 8001944:	028b      	lsls	r3, r1, #10
 8001946:	4621      	mov	r1, r4
 8001948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800194c:	4621      	mov	r1, r4
 800194e:	028a      	lsls	r2, r1, #10
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001956:	2200      	movs	r2, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	61fa      	str	r2, [r7, #28]
 800195c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001960:	f7fe fca6 	bl	80002b0 <__aeabi_uldivmod>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4613      	mov	r3, r2
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	3301      	adds	r3, #1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800197c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800197e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001986:	e002      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001990:	4618      	mov	r0, r3
 8001992:	3750      	adds	r7, #80	; 0x50
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	007a1200 	.word	0x007a1200

080019a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08003de4 	.word	0x08003de4

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019ec:	f7ff ffdc 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0b5b      	lsrs	r3, r3, #13
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08003de4 	.word	0x08003de4

08001a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a30:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4984      	ldr	r1, [pc, #528]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a5e:	4b7c      	ldr	r3, [pc, #496]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4978      	ldr	r1, [pc, #480]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8083 	beq.w	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f97f 	bl	8000db8 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7ff f97b 	bl	8000db8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e162      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001adc:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d02f      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d028      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b04:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d114      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f949 	bl	8000db8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f945 	bl	8000db8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e12a      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ee      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6e:	4938      	ldr	r1, [pc, #224]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e005      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b80:	6093      	str	r3, [r2, #8]
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	4930      	ldr	r1, [pc, #192]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d011      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	491a      	ldr	r1, [pc, #104]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00a      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d004      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	f040 8091 	bne.w	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff f8c0 	bl	8000db8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c3a:	e013      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c3c:	f7ff f8bc 	bl	8000db8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d90c      	bls.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0a3      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470e40 	.word	0x42470e40
 8001c5c:	424711e0 	.word	0x424711e0
 8001c60:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c64:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e5      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d019      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cd2:	d110      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	071b      	lsls	r3, r3, #28
 8001d1c:	4920      	ldr	r1, [pc, #128]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d2a:	f7ff f845 	bl	8000db8 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d32:	f7ff f841 	bl	8000db8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e028      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	490d      	ldr	r1, [pc, #52]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d84:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	424710d8 	.word	0x424710d8
 8001da8:	42470068 	.word	0x42470068

08001dac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e273      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d075      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dca:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d00c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b85      	ldr	r3, [pc, #532]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d112      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de2:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dee:	d10b      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	4b7e      	ldr	r3, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d05b      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x108>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d157      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e24e      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d106      	bne.n	8001e20 <HAL_RCC_OscConfig+0x74>
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a75      	ldr	r2, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xb0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x98>
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6f      	ldr	r2, [pc, #444]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6c      	ldr	r2, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xb0>
 8001e44:	4b69      	ldr	r3, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a68      	ldr	r2, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe ffa8 	bl	8000db8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe ffa4 	bl	8000db8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e213      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xc0>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff94 	bl	8000db8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff90 	bl	8000db8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ff      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0xe8>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x152>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1d3      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4937      	ldr	r1, [pc, #220]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_OscConfig+0x244>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe ff49 	bl	8000db8 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe ff45 	bl	8000db8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1b4      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4925      	ldr	r1, [pc, #148]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_OscConfig+0x244>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe ff28 	bl	8000db8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe ff24 	bl	8000db8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e193      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d036      	beq.n	8002004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_RCC_OscConfig+0x248>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff08 	bl	8000db8 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe ff04 	bl	8000db8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e173      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x240>)
 8001fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x200>
 8001fca:	e01b      	b.n	8002004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_OscConfig+0x248>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fef1 	bl	8000db8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	e00e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fda:	f7fe feed 	bl	8000db8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d907      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e15c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470000 	.word	0x42470000
 8001ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ea      	bne.n	8001fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8097 	beq.w	8002140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b83      	ldr	r3, [pc, #524]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a7e      	ldr	r2, [pc, #504]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b7c      	ldr	r3, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_RCC_OscConfig+0x47c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x47c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x47c>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7fe fead 	bl	8000db8 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe fea9 	bl	8000db8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e118      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <HAL_RCC_OscConfig+0x47c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x2ea>
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	; 0x70
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x324>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x30c>
 800209e:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a60      	ldr	r2, [pc, #384]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	4b5e      	ldr	r3, [pc, #376]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a5d      	ldr	r2, [pc, #372]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0x324>
 80020b8:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a59      	ldr	r2, [pc, #356]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
 80020c4:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a56      	ldr	r2, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020ca:	f023 0304 	bic.w	r3, r3, #4
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7fe fe6e 	bl	8000db8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fe6a 	bl	8000db8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0d7      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ee      	beq.n	80020e0 <HAL_RCC_OscConfig+0x334>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe fe58 	bl	8000db8 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe fe54 	bl	8000db8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0c1      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	4b40      	ldr	r3, [pc, #256]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ee      	bne.n	800210c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800213a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80ad 	beq.w	80022a4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d060      	beq.n	8002218 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d145      	bne.n	80021ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_OscConfig+0x480>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fe28 	bl	8000db8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fe24 	bl	8000db8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e093      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	071b      	lsls	r3, r3, #28
 80021b6:	491b      	ldr	r1, [pc, #108]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x480>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7fe fdf9 	bl	8000db8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7fe fdf5 	bl	8000db8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e064      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x41e>
 80021e8:	e05c      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x480>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fde2 	bl	8000db8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fdde 	bl	8000db8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e04d      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_OscConfig+0x478>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x44c>
 8002216:	e045      	b.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e040      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
 8002224:	40023800 	.word	0x40023800
 8002228:	40007000 	.word	0x40007000
 800222c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_RCC_OscConfig+0x504>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d030      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d129      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d122      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002268:	4293      	cmp	r3, r2
 800226a:	d119      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d10f      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e03f      	b.n	8002346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fb46 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f829 	bl	8002350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800230c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800231c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800232c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b0c0      	sub	sp, #256	; 0x100
 8002356:	af00      	add	r7, sp, #0
 8002358:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	ea40 0301 	orr.w	r3, r0, r1
 8002378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	431a      	orrs	r2, r3
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a8:	f021 010c 	bic.w	r1, r1, #12
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023b6:	430b      	orrs	r3, r1
 80023b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ca:	6999      	ldr	r1, [r3, #24]
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	ea40 0301 	orr.w	r3, r0, r1
 80023d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b8f      	ldr	r3, [pc, #572]	; (800261c <UART_SetConfig+0x2cc>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d005      	beq.n	80023f0 <UART_SetConfig+0xa0>
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <UART_SetConfig+0x2d0>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d104      	bne.n	80023fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f0:	f7ff fafa 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 80023f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f8:	e003      	b.n	8002402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fa:	f7ff fae1 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 80023fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240c:	f040 810c 	bne.w	8002628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800241a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800241e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	1891      	adds	r1, r2, r2
 8002428:	65b9      	str	r1, [r7, #88]	; 0x58
 800242a:	415b      	adcs	r3, r3
 800242c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002432:	4621      	mov	r1, r4
 8002434:	eb12 0801 	adds.w	r8, r2, r1
 8002438:	4629      	mov	r1, r5
 800243a:	eb43 0901 	adc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002460:	462b      	mov	r3, r5
 8002462:	eb49 0303 	adc.w	r3, r9, r3
 8002466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002476:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800247a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800247e:	460b      	mov	r3, r1
 8002480:	18db      	adds	r3, r3, r3
 8002482:	653b      	str	r3, [r7, #80]	; 0x50
 8002484:	4613      	mov	r3, r2
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	657b      	str	r3, [r7, #84]	; 0x54
 800248c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002494:	f7fd ff0c 	bl	80002b0 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <UART_SetConfig+0x2d4>)
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	011c      	lsls	r4, r3, #4
 80024a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	64b9      	str	r1, [r7, #72]	; 0x48
 80024c0:	415b      	adcs	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c8:	4641      	mov	r1, r8
 80024ca:	eb12 0a01 	adds.w	sl, r2, r1
 80024ce:	4649      	mov	r1, r9
 80024d0:	eb43 0b01 	adc.w	fp, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e8:	4692      	mov	sl, r2
 80024ea:	469b      	mov	fp, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	eb1a 0303 	adds.w	r3, sl, r3
 80024f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024f6:	464b      	mov	r3, r9
 80024f8:	eb4b 0303 	adc.w	r3, fp, r3
 80024fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800250c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002514:	460b      	mov	r3, r1
 8002516:	18db      	adds	r3, r3, r3
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
 800251a:	4613      	mov	r3, r2
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
 8002522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800252a:	f7fd fec1 	bl	80002b0 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4611      	mov	r1, r2
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <UART_SetConfig+0x2d4>)
 8002536:	fba3 2301 	umull	r2, r3, r3, r1
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2264      	movs	r2, #100	; 0x64
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800254a:	4b36      	ldr	r3, [pc, #216]	; (8002624 <UART_SetConfig+0x2d4>)
 800254c:	fba3 2302 	umull	r2, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002558:	441c      	add	r4, r3
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002564:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	63b9      	str	r1, [r7, #56]	; 0x38
 8002574:	415b      	adcs	r3, r3
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800257c:	4641      	mov	r1, r8
 800257e:	1851      	adds	r1, r2, r1
 8002580:	6339      	str	r1, [r7, #48]	; 0x30
 8002582:	4649      	mov	r1, r9
 8002584:	414b      	adcs	r3, r1
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002594:	4659      	mov	r1, fp
 8002596:	00cb      	lsls	r3, r1, #3
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259e:	4651      	mov	r1, sl
 80025a0:	00ca      	lsls	r2, r1, #3
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	4642      	mov	r2, r8
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025b0:	464b      	mov	r3, r9
 80025b2:	460a      	mov	r2, r1
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025d0:	460b      	mov	r3, r1
 80025d2:	18db      	adds	r3, r3, r3
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	4613      	mov	r3, r2
 80025d8:	eb42 0303 	adc.w	r3, r2, r3
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025e6:	f7fd fe63 	bl	80002b0 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3332      	adds	r3, #50	; 0x32
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <UART_SetConfig+0x2d4>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4422      	add	r2, r4
 8002616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002618:	e105      	b.n	8002826 <UART_SetConfig+0x4d6>
 800261a:	bf00      	nop
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6239      	str	r1, [r7, #32]
 8002642:	415b      	adcs	r3, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264a:	4641      	mov	r1, r8
 800264c:	1854      	adds	r4, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb43 0501 	adc.w	r5, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002670:	464b      	mov	r3, r9
 8002672:	eb45 0303 	adc.w	r3, r5, r3
 8002676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002696:	4629      	mov	r1, r5
 8002698:	008b      	lsls	r3, r1, #2
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a0:	4621      	mov	r1, r4
 80026a2:	008a      	lsls	r2, r1, #2
 80026a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026a8:	f7fd fe02 	bl	80002b0 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4b60      	ldr	r3, [pc, #384]	; (8002834 <UART_SetConfig+0x4e4>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011c      	lsls	r4, r3, #4
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	61b9      	str	r1, [r7, #24]
 80026d4:	415b      	adcs	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026dc:	4641      	mov	r1, r8
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	6139      	str	r1, [r7, #16]
 80026e2:	4649      	mov	r1, r9
 80026e4:	414b      	adcs	r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	00cb      	lsls	r3, r1, #3
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fe:	4651      	mov	r1, sl
 8002700:	00ca      	lsls	r2, r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4603      	mov	r3, r0
 8002708:	4642      	mov	r2, r8
 800270a:	189b      	adds	r3, r3, r2
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002710:	464b      	mov	r3, r9
 8002712:	460a      	mov	r2, r1
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
 8002726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002734:	4649      	mov	r1, r9
 8002736:	008b      	lsls	r3, r1, #2
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273e:	4641      	mov	r1, r8
 8002740:	008a      	lsls	r2, r1, #2
 8002742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002746:	f7fd fdb3 	bl	80002b0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <UART_SetConfig+0x4e4>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a34      	ldr	r2, [pc, #208]	; (8002834 <UART_SetConfig+0x4e4>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276e:	441c      	add	r4, r3
 8002770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002774:	2200      	movs	r2, #0
 8002776:	673b      	str	r3, [r7, #112]	; 0x70
 8002778:	677a      	str	r2, [r7, #116]	; 0x74
 800277a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800277e:	4642      	mov	r2, r8
 8002780:	464b      	mov	r3, r9
 8002782:	1891      	adds	r1, r2, r2
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	415b      	adcs	r3, r3
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278e:	4641      	mov	r1, r8
 8002790:	1851      	adds	r1, r2, r1
 8002792:	6039      	str	r1, [r7, #0]
 8002794:	4649      	mov	r1, r9
 8002796:	414b      	adcs	r3, r1
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a6:	4659      	mov	r1, fp
 80027a8:	00cb      	lsls	r3, r1, #3
 80027aa:	4651      	mov	r1, sl
 80027ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b0:	4651      	mov	r1, sl
 80027b2:	00ca      	lsls	r2, r1, #3
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	4642      	mov	r2, r8
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c0:	464b      	mov	r3, r9
 80027c2:	460a      	mov	r2, r1
 80027c4:	eb42 0303 	adc.w	r3, r2, r3
 80027c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
 80027d4:	667a      	str	r2, [r7, #100]	; 0x64
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027e2:	4649      	mov	r1, r9
 80027e4:	008b      	lsls	r3, r1, #2
 80027e6:	4641      	mov	r1, r8
 80027e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ec:	4641      	mov	r1, r8
 80027ee:	008a      	lsls	r2, r1, #2
 80027f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f4:	f7fd fd5c 	bl	80002b0 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <UART_SetConfig+0x4e4>)
 80027fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2164      	movs	r1, #100	; 0x64
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a08      	ldr	r2, [pc, #32]	; (8002834 <UART_SetConfig+0x4e4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4422      	add	r2, r4
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	51eb851f 	.word	0x51eb851f

08002838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002838:	b084      	sub	sp, #16
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	f107 001c 	add.w	r0, r7, #28
 8002846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	2b01      	cmp	r3, #1
 800284e:	d122      	bne.n	8002896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa9c 	bl	8002dc8 <USB_CoreReset>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e01a      	b.n	80028cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa90 	bl	8002dc8 <USB_CoreReset>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
 80028be:	e005      	b.n	80028cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10b      	bne.n	80028ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f043 0206 	orr.w	r2, r3, #6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028f6:	b004      	add	sp, #16
 80028f8:	4770      	bx	lr

080028fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d115      	bne.n	800296a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe fa40 	bl	8000dd0 <HAL_Delay>
      ms++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3301      	adds	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa28 	bl	8002dac <USB_GetMode>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d01e      	beq.n	80029a0 <USB_SetCurrentMode+0x84>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b31      	cmp	r3, #49	; 0x31
 8002966:	d9f0      	bls.n	800294a <USB_SetCurrentMode+0x2e>
 8002968:	e01a      	b.n	80029a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800297c:	2001      	movs	r0, #1
 800297e:	f7fe fa27 	bl	8000dd0 <HAL_Delay>
      ms++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa0f 	bl	8002dac <USB_GetMode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <USB_SetCurrentMode+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b31      	cmp	r3, #49	; 0x31
 8002998:	d9f0      	bls.n	800297c <USB_SetCurrentMode+0x60>
 800299a:	e001      	b.n	80029a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e005      	b.n	80029ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b32      	cmp	r3, #50	; 0x32
 80029a4:	d101      	bne.n	80029aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029b4:	b084      	sub	sp, #16
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e009      	b.n	80029e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0e      	cmp	r3, #14
 80029ec:	d9f2      	bls.n	80029d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11c      	bne.n	8002a2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e005      	b.n	8002a3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a40:	461a      	mov	r2, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	461a      	mov	r2, r3
 8002a56:	680b      	ldr	r3, [r1, #0]
 8002a58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f965 	bl	8002d38 <USB_SetDevSpeed>
 8002a6e:	e008      	b.n	8002a82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a70:	2101      	movs	r1, #1
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f960 	bl	8002d38 <USB_SetDevSpeed>
 8002a78:	e003      	b.n	8002a82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f95b 	bl	8002d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a82:	2110      	movs	r1, #16
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8f3 	bl	8002c70 <USB_FlushTxFifo>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f91f 	bl	8002cd8 <USB_FlushRxFifo>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2300      	movs	r3, #0
 8002aae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e043      	b.n	8002b56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae4:	d118      	bne.n	8002b18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e013      	b.n	8002b2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e008      	b.n	8002b2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	3301      	adds	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3b7      	bcc.n	8002ace <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e043      	b.n	8002bec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7a:	d118      	bne.n	8002bae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e013      	b.n	8002bc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e008      	b.n	8002bc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	461a      	mov	r2, r3
 8002be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3301      	adds	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3b7      	bcc.n	8002b64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <USB_DevInit+0x2b8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f043 0208 	orr.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c68:	b004      	add	sp, #16
 8002c6a:	4770      	bx	lr
 8002c6c:	803c3800 	.word	0x803c3800

08002c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <USB_FlushTxFifo+0x64>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e01b      	b.n	8002cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	daf2      	bge.n	8002c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <USB_FlushTxFifo+0x64>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e006      	b.n	8002cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d0f0      	beq.n	8002ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	00030d40 	.word	0x00030d40

08002cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <USB_FlushRxFifo+0x5c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e018      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	daf2      	bge.n	8002ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2210      	movs	r2, #16
 8002d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <USB_FlushRxFifo+0x5c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e006      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d0f0      	beq.n	8002d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	00030d40 	.word	0x00030d40

08002d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0301 	and.w	r3, r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <USB_CoreReset+0x64>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e01b      	b.n	8002e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	daf2      	bge.n	8002dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <USB_CoreReset+0x64>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e006      	b.n	8002e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d0f0      	beq.n	8002dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	00030d40 	.word	0x00030d40

08002e30 <__errno>:
 8002e30:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <__errno+0x8>)
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	; (8002e74 <__libc_init_array+0x38>)
 8002e40:	4c0d      	ldr	r4, [pc, #52]	; (8002e78 <__libc_init_array+0x3c>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	2600      	movs	r6, #0
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	4d0b      	ldr	r5, [pc, #44]	; (8002e7c <__libc_init_array+0x40>)
 8002e4e:	4c0c      	ldr	r4, [pc, #48]	; (8002e80 <__libc_init_array+0x44>)
 8002e50:	f000 ffae 	bl	8003db0 <_init>
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	2600      	movs	r6, #0
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	08003e8c 	.word	0x08003e8c
 8002e78:	08003e8c 	.word	0x08003e8c
 8002e7c:	08003e8c 	.word	0x08003e8c
 8002e80:	08003e90 	.word	0x08003e90

08002e84 <memset>:
 8002e84:	4402      	add	r2, r0
 8002e86:	4603      	mov	r3, r0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <memset+0xa>
 8002e8c:	4770      	bx	lr
 8002e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e92:	e7f9      	b.n	8002e88 <memset+0x4>

08002e94 <iprintf>:
 8002e94:	b40f      	push	{r0, r1, r2, r3}
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <iprintf+0x2c>)
 8002e98:	b513      	push	{r0, r1, r4, lr}
 8002e9a:	681c      	ldr	r4, [r3, #0]
 8002e9c:	b124      	cbz	r4, 8002ea8 <iprintf+0x14>
 8002e9e:	69a3      	ldr	r3, [r4, #24]
 8002ea0:	b913      	cbnz	r3, 8002ea8 <iprintf+0x14>
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f866 	bl	8002f74 <__sinit>
 8002ea8:	ab05      	add	r3, sp, #20
 8002eaa:	9a04      	ldr	r2, [sp, #16]
 8002eac:	68a1      	ldr	r1, [r4, #8]
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 f9bd 	bl	8003230 <_vfiprintf_r>
 8002eb6:	b002      	add	sp, #8
 8002eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ebc:	b004      	add	sp, #16
 8002ebe:	4770      	bx	lr
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <std>:
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	b510      	push	{r4, lr}
 8002ec8:	4604      	mov	r4, r0
 8002eca:	e9c0 3300 	strd	r3, r3, [r0]
 8002ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ed2:	6083      	str	r3, [r0, #8]
 8002ed4:	8181      	strh	r1, [r0, #12]
 8002ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ed8:	81c2      	strh	r2, [r0, #14]
 8002eda:	6183      	str	r3, [r0, #24]
 8002edc:	4619      	mov	r1, r3
 8002ede:	2208      	movs	r2, #8
 8002ee0:	305c      	adds	r0, #92	; 0x5c
 8002ee2:	f7ff ffcf 	bl	8002e84 <memset>
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <std+0x38>)
 8002ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <std+0x3c>)
 8002eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <std+0x40>)
 8002ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <std+0x44>)
 8002ef4:	6224      	str	r4, [r4, #32]
 8002ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ef8:	bd10      	pop	{r4, pc}
 8002efa:	bf00      	nop
 8002efc:	080037d9 	.word	0x080037d9
 8002f00:	080037fb 	.word	0x080037fb
 8002f04:	08003833 	.word	0x08003833
 8002f08:	08003857 	.word	0x08003857

08002f0c <_cleanup_r>:
 8002f0c:	4901      	ldr	r1, [pc, #4]	; (8002f14 <_cleanup_r+0x8>)
 8002f0e:	f000 b8af 	b.w	8003070 <_fwalk_reent>
 8002f12:	bf00      	nop
 8002f14:	08003b31 	.word	0x08003b31

08002f18 <__sfmoreglue>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	2268      	movs	r2, #104	; 0x68
 8002f1c:	1e4d      	subs	r5, r1, #1
 8002f1e:	4355      	muls	r5, r2
 8002f20:	460e      	mov	r6, r1
 8002f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f26:	f000 f8e5 	bl	80030f4 <_malloc_r>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	b140      	cbz	r0, 8002f40 <__sfmoreglue+0x28>
 8002f2e:	2100      	movs	r1, #0
 8002f30:	e9c0 1600 	strd	r1, r6, [r0]
 8002f34:	300c      	adds	r0, #12
 8002f36:	60a0      	str	r0, [r4, #8]
 8002f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f3c:	f7ff ffa2 	bl	8002e84 <memset>
 8002f40:	4620      	mov	r0, r4
 8002f42:	bd70      	pop	{r4, r5, r6, pc}

08002f44 <__sfp_lock_acquire>:
 8002f44:	4801      	ldr	r0, [pc, #4]	; (8002f4c <__sfp_lock_acquire+0x8>)
 8002f46:	f000 b8b3 	b.w	80030b0 <__retarget_lock_acquire_recursive>
 8002f4a:	bf00      	nop
 8002f4c:	200005e5 	.word	0x200005e5

08002f50 <__sfp_lock_release>:
 8002f50:	4801      	ldr	r0, [pc, #4]	; (8002f58 <__sfp_lock_release+0x8>)
 8002f52:	f000 b8ae 	b.w	80030b2 <__retarget_lock_release_recursive>
 8002f56:	bf00      	nop
 8002f58:	200005e5 	.word	0x200005e5

08002f5c <__sinit_lock_acquire>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__sinit_lock_acquire+0x8>)
 8002f5e:	f000 b8a7 	b.w	80030b0 <__retarget_lock_acquire_recursive>
 8002f62:	bf00      	nop
 8002f64:	200005e6 	.word	0x200005e6

08002f68 <__sinit_lock_release>:
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <__sinit_lock_release+0x8>)
 8002f6a:	f000 b8a2 	b.w	80030b2 <__retarget_lock_release_recursive>
 8002f6e:	bf00      	nop
 8002f70:	200005e6 	.word	0x200005e6

08002f74 <__sinit>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
 8002f78:	f7ff fff0 	bl	8002f5c <__sinit_lock_acquire>
 8002f7c:	69a3      	ldr	r3, [r4, #24]
 8002f7e:	b11b      	cbz	r3, 8002f88 <__sinit+0x14>
 8002f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f84:	f7ff bff0 	b.w	8002f68 <__sinit_lock_release>
 8002f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <__sinit+0x68>)
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <__sinit+0x6c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	bf04      	itt	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	61a3      	streq	r3, [r4, #24]
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f820 	bl	8002fe4 <__sfp>
 8002fa4:	6060      	str	r0, [r4, #4]
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 f81c 	bl	8002fe4 <__sfp>
 8002fac:	60a0      	str	r0, [r4, #8]
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f000 f818 	bl	8002fe4 <__sfp>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60e0      	str	r0, [r4, #12]
 8002fb8:	2104      	movs	r1, #4
 8002fba:	6860      	ldr	r0, [r4, #4]
 8002fbc:	f7ff ff82 	bl	8002ec4 <std>
 8002fc0:	68a0      	ldr	r0, [r4, #8]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	2109      	movs	r1, #9
 8002fc6:	f7ff ff7d 	bl	8002ec4 <std>
 8002fca:	68e0      	ldr	r0, [r4, #12]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	2112      	movs	r1, #18
 8002fd0:	f7ff ff78 	bl	8002ec4 <std>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61a3      	str	r3, [r4, #24]
 8002fd8:	e7d2      	b.n	8002f80 <__sinit+0xc>
 8002fda:	bf00      	nop
 8002fdc:	08003dec 	.word	0x08003dec
 8002fe0:	08002f0d 	.word	0x08002f0d

08002fe4 <__sfp>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	4607      	mov	r7, r0
 8002fe8:	f7ff ffac 	bl	8002f44 <__sfp_lock_acquire>
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <__sfp+0x84>)
 8002fee:	681e      	ldr	r6, [r3, #0]
 8002ff0:	69b3      	ldr	r3, [r6, #24]
 8002ff2:	b913      	cbnz	r3, 8002ffa <__sfp+0x16>
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f7ff ffbd 	bl	8002f74 <__sinit>
 8002ffa:	3648      	adds	r6, #72	; 0x48
 8002ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003000:	3b01      	subs	r3, #1
 8003002:	d503      	bpl.n	800300c <__sfp+0x28>
 8003004:	6833      	ldr	r3, [r6, #0]
 8003006:	b30b      	cbz	r3, 800304c <__sfp+0x68>
 8003008:	6836      	ldr	r6, [r6, #0]
 800300a:	e7f7      	b.n	8002ffc <__sfp+0x18>
 800300c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003010:	b9d5      	cbnz	r5, 8003048 <__sfp+0x64>
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <__sfp+0x88>)
 8003014:	60e3      	str	r3, [r4, #12]
 8003016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800301a:	6665      	str	r5, [r4, #100]	; 0x64
 800301c:	f000 f847 	bl	80030ae <__retarget_lock_init_recursive>
 8003020:	f7ff ff96 	bl	8002f50 <__sfp_lock_release>
 8003024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800302c:	6025      	str	r5, [r4, #0]
 800302e:	61a5      	str	r5, [r4, #24]
 8003030:	2208      	movs	r2, #8
 8003032:	4629      	mov	r1, r5
 8003034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003038:	f7ff ff24 	bl	8002e84 <memset>
 800303c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003044:	4620      	mov	r0, r4
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003048:	3468      	adds	r4, #104	; 0x68
 800304a:	e7d9      	b.n	8003000 <__sfp+0x1c>
 800304c:	2104      	movs	r1, #4
 800304e:	4638      	mov	r0, r7
 8003050:	f7ff ff62 	bl	8002f18 <__sfmoreglue>
 8003054:	4604      	mov	r4, r0
 8003056:	6030      	str	r0, [r6, #0]
 8003058:	2800      	cmp	r0, #0
 800305a:	d1d5      	bne.n	8003008 <__sfp+0x24>
 800305c:	f7ff ff78 	bl	8002f50 <__sfp_lock_release>
 8003060:	230c      	movs	r3, #12
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	e7ee      	b.n	8003044 <__sfp+0x60>
 8003066:	bf00      	nop
 8003068:	08003dec 	.word	0x08003dec
 800306c:	ffff0001 	.word	0xffff0001

08003070 <_fwalk_reent>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	4606      	mov	r6, r0
 8003076:	4688      	mov	r8, r1
 8003078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800307c:	2700      	movs	r7, #0
 800307e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003082:	f1b9 0901 	subs.w	r9, r9, #1
 8003086:	d505      	bpl.n	8003094 <_fwalk_reent+0x24>
 8003088:	6824      	ldr	r4, [r4, #0]
 800308a:	2c00      	cmp	r4, #0
 800308c:	d1f7      	bne.n	800307e <_fwalk_reent+0xe>
 800308e:	4638      	mov	r0, r7
 8003090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003094:	89ab      	ldrh	r3, [r5, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d907      	bls.n	80030aa <_fwalk_reent+0x3a>
 800309a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800309e:	3301      	adds	r3, #1
 80030a0:	d003      	beq.n	80030aa <_fwalk_reent+0x3a>
 80030a2:	4629      	mov	r1, r5
 80030a4:	4630      	mov	r0, r6
 80030a6:	47c0      	blx	r8
 80030a8:	4307      	orrs	r7, r0
 80030aa:	3568      	adds	r5, #104	; 0x68
 80030ac:	e7e9      	b.n	8003082 <_fwalk_reent+0x12>

080030ae <__retarget_lock_init_recursive>:
 80030ae:	4770      	bx	lr

080030b0 <__retarget_lock_acquire_recursive>:
 80030b0:	4770      	bx	lr

080030b2 <__retarget_lock_release_recursive>:
 80030b2:	4770      	bx	lr

080030b4 <sbrk_aligned>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4e0e      	ldr	r6, [pc, #56]	; (80030f0 <sbrk_aligned+0x3c>)
 80030b8:	460c      	mov	r4, r1
 80030ba:	6831      	ldr	r1, [r6, #0]
 80030bc:	4605      	mov	r5, r0
 80030be:	b911      	cbnz	r1, 80030c6 <sbrk_aligned+0x12>
 80030c0:	f000 fb7a 	bl	80037b8 <_sbrk_r>
 80030c4:	6030      	str	r0, [r6, #0]
 80030c6:	4621      	mov	r1, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 fb75 	bl	80037b8 <_sbrk_r>
 80030ce:	1c43      	adds	r3, r0, #1
 80030d0:	d00a      	beq.n	80030e8 <sbrk_aligned+0x34>
 80030d2:	1cc4      	adds	r4, r0, #3
 80030d4:	f024 0403 	bic.w	r4, r4, #3
 80030d8:	42a0      	cmp	r0, r4
 80030da:	d007      	beq.n	80030ec <sbrk_aligned+0x38>
 80030dc:	1a21      	subs	r1, r4, r0
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 fb6a 	bl	80037b8 <_sbrk_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d101      	bne.n	80030ec <sbrk_aligned+0x38>
 80030e8:	f04f 34ff 	mov.w	r4, #4294967295
 80030ec:	4620      	mov	r0, r4
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	200005ec 	.word	0x200005ec

080030f4 <_malloc_r>:
 80030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f8:	1ccd      	adds	r5, r1, #3
 80030fa:	f025 0503 	bic.w	r5, r5, #3
 80030fe:	3508      	adds	r5, #8
 8003100:	2d0c      	cmp	r5, #12
 8003102:	bf38      	it	cc
 8003104:	250c      	movcc	r5, #12
 8003106:	2d00      	cmp	r5, #0
 8003108:	4607      	mov	r7, r0
 800310a:	db01      	blt.n	8003110 <_malloc_r+0x1c>
 800310c:	42a9      	cmp	r1, r5
 800310e:	d905      	bls.n	800311c <_malloc_r+0x28>
 8003110:	230c      	movs	r3, #12
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	2600      	movs	r6, #0
 8003116:	4630      	mov	r0, r6
 8003118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311c:	4e2e      	ldr	r6, [pc, #184]	; (80031d8 <_malloc_r+0xe4>)
 800311e:	f000 fdbb 	bl	8003c98 <__malloc_lock>
 8003122:	6833      	ldr	r3, [r6, #0]
 8003124:	461c      	mov	r4, r3
 8003126:	bb34      	cbnz	r4, 8003176 <_malloc_r+0x82>
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	f7ff ffc2 	bl	80030b4 <sbrk_aligned>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	4604      	mov	r4, r0
 8003134:	d14d      	bne.n	80031d2 <_malloc_r+0xde>
 8003136:	6834      	ldr	r4, [r6, #0]
 8003138:	4626      	mov	r6, r4
 800313a:	2e00      	cmp	r6, #0
 800313c:	d140      	bne.n	80031c0 <_malloc_r+0xcc>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	4631      	mov	r1, r6
 8003142:	4638      	mov	r0, r7
 8003144:	eb04 0803 	add.w	r8, r4, r3
 8003148:	f000 fb36 	bl	80037b8 <_sbrk_r>
 800314c:	4580      	cmp	r8, r0
 800314e:	d13a      	bne.n	80031c6 <_malloc_r+0xd2>
 8003150:	6821      	ldr	r1, [r4, #0]
 8003152:	3503      	adds	r5, #3
 8003154:	1a6d      	subs	r5, r5, r1
 8003156:	f025 0503 	bic.w	r5, r5, #3
 800315a:	3508      	adds	r5, #8
 800315c:	2d0c      	cmp	r5, #12
 800315e:	bf38      	it	cc
 8003160:	250c      	movcc	r5, #12
 8003162:	4629      	mov	r1, r5
 8003164:	4638      	mov	r0, r7
 8003166:	f7ff ffa5 	bl	80030b4 <sbrk_aligned>
 800316a:	3001      	adds	r0, #1
 800316c:	d02b      	beq.n	80031c6 <_malloc_r+0xd2>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	442b      	add	r3, r5
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	e00e      	b.n	8003194 <_malloc_r+0xa0>
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	1b52      	subs	r2, r2, r5
 800317a:	d41e      	bmi.n	80031ba <_malloc_r+0xc6>
 800317c:	2a0b      	cmp	r2, #11
 800317e:	d916      	bls.n	80031ae <_malloc_r+0xba>
 8003180:	1961      	adds	r1, r4, r5
 8003182:	42a3      	cmp	r3, r4
 8003184:	6025      	str	r5, [r4, #0]
 8003186:	bf18      	it	ne
 8003188:	6059      	strne	r1, [r3, #4]
 800318a:	6863      	ldr	r3, [r4, #4]
 800318c:	bf08      	it	eq
 800318e:	6031      	streq	r1, [r6, #0]
 8003190:	5162      	str	r2, [r4, r5]
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	4638      	mov	r0, r7
 8003196:	f104 060b 	add.w	r6, r4, #11
 800319a:	f000 fd83 	bl	8003ca4 <__malloc_unlock>
 800319e:	f026 0607 	bic.w	r6, r6, #7
 80031a2:	1d23      	adds	r3, r4, #4
 80031a4:	1af2      	subs	r2, r6, r3
 80031a6:	d0b6      	beq.n	8003116 <_malloc_r+0x22>
 80031a8:	1b9b      	subs	r3, r3, r6
 80031aa:	50a3      	str	r3, [r4, r2]
 80031ac:	e7b3      	b.n	8003116 <_malloc_r+0x22>
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	42a3      	cmp	r3, r4
 80031b2:	bf0c      	ite	eq
 80031b4:	6032      	streq	r2, [r6, #0]
 80031b6:	605a      	strne	r2, [r3, #4]
 80031b8:	e7ec      	b.n	8003194 <_malloc_r+0xa0>
 80031ba:	4623      	mov	r3, r4
 80031bc:	6864      	ldr	r4, [r4, #4]
 80031be:	e7b2      	b.n	8003126 <_malloc_r+0x32>
 80031c0:	4634      	mov	r4, r6
 80031c2:	6876      	ldr	r6, [r6, #4]
 80031c4:	e7b9      	b.n	800313a <_malloc_r+0x46>
 80031c6:	230c      	movs	r3, #12
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	4638      	mov	r0, r7
 80031cc:	f000 fd6a 	bl	8003ca4 <__malloc_unlock>
 80031d0:	e7a1      	b.n	8003116 <_malloc_r+0x22>
 80031d2:	6025      	str	r5, [r4, #0]
 80031d4:	e7de      	b.n	8003194 <_malloc_r+0xa0>
 80031d6:	bf00      	nop
 80031d8:	200005e8 	.word	0x200005e8

080031dc <__sfputc_r>:
 80031dc:	6893      	ldr	r3, [r2, #8]
 80031de:	3b01      	subs	r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	b410      	push	{r4}
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	da08      	bge.n	80031fa <__sfputc_r+0x1e>
 80031e8:	6994      	ldr	r4, [r2, #24]
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	db01      	blt.n	80031f2 <__sfputc_r+0x16>
 80031ee:	290a      	cmp	r1, #10
 80031f0:	d103      	bne.n	80031fa <__sfputc_r+0x1e>
 80031f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031f6:	f000 bb33 	b.w	8003860 <__swbuf_r>
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	1c58      	adds	r0, r3, #1
 80031fe:	6010      	str	r0, [r2, #0]
 8003200:	7019      	strb	r1, [r3, #0]
 8003202:	4608      	mov	r0, r1
 8003204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003208:	4770      	bx	lr

0800320a <__sfputs_r>:
 800320a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320c:	4606      	mov	r6, r0
 800320e:	460f      	mov	r7, r1
 8003210:	4614      	mov	r4, r2
 8003212:	18d5      	adds	r5, r2, r3
 8003214:	42ac      	cmp	r4, r5
 8003216:	d101      	bne.n	800321c <__sfputs_r+0x12>
 8003218:	2000      	movs	r0, #0
 800321a:	e007      	b.n	800322c <__sfputs_r+0x22>
 800321c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003220:	463a      	mov	r2, r7
 8003222:	4630      	mov	r0, r6
 8003224:	f7ff ffda 	bl	80031dc <__sfputc_r>
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	d1f3      	bne.n	8003214 <__sfputs_r+0xa>
 800322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003230 <_vfiprintf_r>:
 8003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	460d      	mov	r5, r1
 8003236:	b09d      	sub	sp, #116	; 0x74
 8003238:	4614      	mov	r4, r2
 800323a:	4698      	mov	r8, r3
 800323c:	4606      	mov	r6, r0
 800323e:	b118      	cbz	r0, 8003248 <_vfiprintf_r+0x18>
 8003240:	6983      	ldr	r3, [r0, #24]
 8003242:	b90b      	cbnz	r3, 8003248 <_vfiprintf_r+0x18>
 8003244:	f7ff fe96 	bl	8002f74 <__sinit>
 8003248:	4b89      	ldr	r3, [pc, #548]	; (8003470 <_vfiprintf_r+0x240>)
 800324a:	429d      	cmp	r5, r3
 800324c:	d11b      	bne.n	8003286 <_vfiprintf_r+0x56>
 800324e:	6875      	ldr	r5, [r6, #4]
 8003250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003252:	07d9      	lsls	r1, r3, #31
 8003254:	d405      	bmi.n	8003262 <_vfiprintf_r+0x32>
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	059a      	lsls	r2, r3, #22
 800325a:	d402      	bmi.n	8003262 <_vfiprintf_r+0x32>
 800325c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800325e:	f7ff ff27 	bl	80030b0 <__retarget_lock_acquire_recursive>
 8003262:	89ab      	ldrh	r3, [r5, #12]
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	d501      	bpl.n	800326c <_vfiprintf_r+0x3c>
 8003268:	692b      	ldr	r3, [r5, #16]
 800326a:	b9eb      	cbnz	r3, 80032a8 <_vfiprintf_r+0x78>
 800326c:	4629      	mov	r1, r5
 800326e:	4630      	mov	r0, r6
 8003270:	f000 fb5a 	bl	8003928 <__swsetup_r>
 8003274:	b1c0      	cbz	r0, 80032a8 <_vfiprintf_r+0x78>
 8003276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003278:	07dc      	lsls	r4, r3, #31
 800327a:	d50e      	bpl.n	800329a <_vfiprintf_r+0x6a>
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	b01d      	add	sp, #116	; 0x74
 8003282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003286:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <_vfiprintf_r+0x244>)
 8003288:	429d      	cmp	r5, r3
 800328a:	d101      	bne.n	8003290 <_vfiprintf_r+0x60>
 800328c:	68b5      	ldr	r5, [r6, #8]
 800328e:	e7df      	b.n	8003250 <_vfiprintf_r+0x20>
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <_vfiprintf_r+0x248>)
 8003292:	429d      	cmp	r5, r3
 8003294:	bf08      	it	eq
 8003296:	68f5      	ldreq	r5, [r6, #12]
 8003298:	e7da      	b.n	8003250 <_vfiprintf_r+0x20>
 800329a:	89ab      	ldrh	r3, [r5, #12]
 800329c:	0598      	lsls	r0, r3, #22
 800329e:	d4ed      	bmi.n	800327c <_vfiprintf_r+0x4c>
 80032a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032a2:	f7ff ff06 	bl	80030b2 <__retarget_lock_release_recursive>
 80032a6:	e7e9      	b.n	800327c <_vfiprintf_r+0x4c>
 80032a8:	2300      	movs	r3, #0
 80032aa:	9309      	str	r3, [sp, #36]	; 0x24
 80032ac:	2320      	movs	r3, #32
 80032ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b6:	2330      	movs	r3, #48	; 0x30
 80032b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800347c <_vfiprintf_r+0x24c>
 80032bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c0:	f04f 0901 	mov.w	r9, #1
 80032c4:	4623      	mov	r3, r4
 80032c6:	469a      	mov	sl, r3
 80032c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032cc:	b10a      	cbz	r2, 80032d2 <_vfiprintf_r+0xa2>
 80032ce:	2a25      	cmp	r2, #37	; 0x25
 80032d0:	d1f9      	bne.n	80032c6 <_vfiprintf_r+0x96>
 80032d2:	ebba 0b04 	subs.w	fp, sl, r4
 80032d6:	d00b      	beq.n	80032f0 <_vfiprintf_r+0xc0>
 80032d8:	465b      	mov	r3, fp
 80032da:	4622      	mov	r2, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	4630      	mov	r0, r6
 80032e0:	f7ff ff93 	bl	800320a <__sfputs_r>
 80032e4:	3001      	adds	r0, #1
 80032e6:	f000 80aa 	beq.w	800343e <_vfiprintf_r+0x20e>
 80032ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ec:	445a      	add	r2, fp
 80032ee:	9209      	str	r2, [sp, #36]	; 0x24
 80032f0:	f89a 3000 	ldrb.w	r3, [sl]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a2 	beq.w	800343e <_vfiprintf_r+0x20e>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003304:	f10a 0a01 	add.w	sl, sl, #1
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	9307      	str	r3, [sp, #28]
 800330c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003310:	931a      	str	r3, [sp, #104]	; 0x68
 8003312:	4654      	mov	r4, sl
 8003314:	2205      	movs	r2, #5
 8003316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331a:	4858      	ldr	r0, [pc, #352]	; (800347c <_vfiprintf_r+0x24c>)
 800331c:	f7fc ff78 	bl	8000210 <memchr>
 8003320:	9a04      	ldr	r2, [sp, #16]
 8003322:	b9d8      	cbnz	r0, 800335c <_vfiprintf_r+0x12c>
 8003324:	06d1      	lsls	r1, r2, #27
 8003326:	bf44      	itt	mi
 8003328:	2320      	movmi	r3, #32
 800332a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800332e:	0713      	lsls	r3, r2, #28
 8003330:	bf44      	itt	mi
 8003332:	232b      	movmi	r3, #43	; 0x2b
 8003334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003338:	f89a 3000 	ldrb.w	r3, [sl]
 800333c:	2b2a      	cmp	r3, #42	; 0x2a
 800333e:	d015      	beq.n	800336c <_vfiprintf_r+0x13c>
 8003340:	9a07      	ldr	r2, [sp, #28]
 8003342:	4654      	mov	r4, sl
 8003344:	2000      	movs	r0, #0
 8003346:	f04f 0c0a 	mov.w	ip, #10
 800334a:	4621      	mov	r1, r4
 800334c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003350:	3b30      	subs	r3, #48	; 0x30
 8003352:	2b09      	cmp	r3, #9
 8003354:	d94e      	bls.n	80033f4 <_vfiprintf_r+0x1c4>
 8003356:	b1b0      	cbz	r0, 8003386 <_vfiprintf_r+0x156>
 8003358:	9207      	str	r2, [sp, #28]
 800335a:	e014      	b.n	8003386 <_vfiprintf_r+0x156>
 800335c:	eba0 0308 	sub.w	r3, r0, r8
 8003360:	fa09 f303 	lsl.w	r3, r9, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	9304      	str	r3, [sp, #16]
 8003368:	46a2      	mov	sl, r4
 800336a:	e7d2      	b.n	8003312 <_vfiprintf_r+0xe2>
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	1d19      	adds	r1, r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	9103      	str	r1, [sp, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	bfbb      	ittet	lt
 8003378:	425b      	neglt	r3, r3
 800337a:	f042 0202 	orrlt.w	r2, r2, #2
 800337e:	9307      	strge	r3, [sp, #28]
 8003380:	9307      	strlt	r3, [sp, #28]
 8003382:	bfb8      	it	lt
 8003384:	9204      	strlt	r2, [sp, #16]
 8003386:	7823      	ldrb	r3, [r4, #0]
 8003388:	2b2e      	cmp	r3, #46	; 0x2e
 800338a:	d10c      	bne.n	80033a6 <_vfiprintf_r+0x176>
 800338c:	7863      	ldrb	r3, [r4, #1]
 800338e:	2b2a      	cmp	r3, #42	; 0x2a
 8003390:	d135      	bne.n	80033fe <_vfiprintf_r+0x1ce>
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	9203      	str	r2, [sp, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	bfb8      	it	lt
 800339e:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a2:	3402      	adds	r4, #2
 80033a4:	9305      	str	r3, [sp, #20]
 80033a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800348c <_vfiprintf_r+0x25c>
 80033aa:	7821      	ldrb	r1, [r4, #0]
 80033ac:	2203      	movs	r2, #3
 80033ae:	4650      	mov	r0, sl
 80033b0:	f7fc ff2e 	bl	8000210 <memchr>
 80033b4:	b140      	cbz	r0, 80033c8 <_vfiprintf_r+0x198>
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	eba0 000a 	sub.w	r0, r0, sl
 80033bc:	fa03 f000 	lsl.w	r0, r3, r0
 80033c0:	9b04      	ldr	r3, [sp, #16]
 80033c2:	4303      	orrs	r3, r0
 80033c4:	3401      	adds	r4, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033cc:	482c      	ldr	r0, [pc, #176]	; (8003480 <_vfiprintf_r+0x250>)
 80033ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d2:	2206      	movs	r2, #6
 80033d4:	f7fc ff1c 	bl	8000210 <memchr>
 80033d8:	2800      	cmp	r0, #0
 80033da:	d03f      	beq.n	800345c <_vfiprintf_r+0x22c>
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <_vfiprintf_r+0x254>)
 80033de:	bb1b      	cbnz	r3, 8003428 <_vfiprintf_r+0x1f8>
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	3307      	adds	r3, #7
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	3308      	adds	r3, #8
 80033ea:	9303      	str	r3, [sp, #12]
 80033ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ee:	443b      	add	r3, r7
 80033f0:	9309      	str	r3, [sp, #36]	; 0x24
 80033f2:	e767      	b.n	80032c4 <_vfiprintf_r+0x94>
 80033f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f8:	460c      	mov	r4, r1
 80033fa:	2001      	movs	r0, #1
 80033fc:	e7a5      	b.n	800334a <_vfiprintf_r+0x11a>
 80033fe:	2300      	movs	r3, #0
 8003400:	3401      	adds	r4, #1
 8003402:	9305      	str	r3, [sp, #20]
 8003404:	4619      	mov	r1, r3
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	4620      	mov	r0, r4
 800340c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003410:	3a30      	subs	r2, #48	; 0x30
 8003412:	2a09      	cmp	r2, #9
 8003414:	d903      	bls.n	800341e <_vfiprintf_r+0x1ee>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0c5      	beq.n	80033a6 <_vfiprintf_r+0x176>
 800341a:	9105      	str	r1, [sp, #20]
 800341c:	e7c3      	b.n	80033a6 <_vfiprintf_r+0x176>
 800341e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003422:	4604      	mov	r4, r0
 8003424:	2301      	movs	r3, #1
 8003426:	e7f0      	b.n	800340a <_vfiprintf_r+0x1da>
 8003428:	ab03      	add	r3, sp, #12
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	462a      	mov	r2, r5
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <_vfiprintf_r+0x258>)
 8003430:	a904      	add	r1, sp, #16
 8003432:	4630      	mov	r0, r6
 8003434:	f3af 8000 	nop.w
 8003438:	4607      	mov	r7, r0
 800343a:	1c78      	adds	r0, r7, #1
 800343c:	d1d6      	bne.n	80033ec <_vfiprintf_r+0x1bc>
 800343e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003440:	07d9      	lsls	r1, r3, #31
 8003442:	d405      	bmi.n	8003450 <_vfiprintf_r+0x220>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	059a      	lsls	r2, r3, #22
 8003448:	d402      	bmi.n	8003450 <_vfiprintf_r+0x220>
 800344a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800344c:	f7ff fe31 	bl	80030b2 <__retarget_lock_release_recursive>
 8003450:	89ab      	ldrh	r3, [r5, #12]
 8003452:	065b      	lsls	r3, r3, #25
 8003454:	f53f af12 	bmi.w	800327c <_vfiprintf_r+0x4c>
 8003458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800345a:	e711      	b.n	8003280 <_vfiprintf_r+0x50>
 800345c:	ab03      	add	r3, sp, #12
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	462a      	mov	r2, r5
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <_vfiprintf_r+0x258>)
 8003464:	a904      	add	r1, sp, #16
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f880 	bl	800356c <_printf_i>
 800346c:	e7e4      	b.n	8003438 <_vfiprintf_r+0x208>
 800346e:	bf00      	nop
 8003470:	08003e10 	.word	0x08003e10
 8003474:	08003e30 	.word	0x08003e30
 8003478:	08003df0 	.word	0x08003df0
 800347c:	08003e50 	.word	0x08003e50
 8003480:	08003e5a 	.word	0x08003e5a
 8003484:	00000000 	.word	0x00000000
 8003488:	0800320b 	.word	0x0800320b
 800348c:	08003e56 	.word	0x08003e56

08003490 <_printf_common>:
 8003490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003494:	4616      	mov	r6, r2
 8003496:	4699      	mov	r9, r3
 8003498:	688a      	ldr	r2, [r1, #8]
 800349a:	690b      	ldr	r3, [r1, #16]
 800349c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	bfb8      	it	lt
 80034a4:	4613      	movlt	r3, r2
 80034a6:	6033      	str	r3, [r6, #0]
 80034a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034ac:	4607      	mov	r7, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	b10a      	cbz	r2, 80034b6 <_printf_common+0x26>
 80034b2:	3301      	adds	r3, #1
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	0699      	lsls	r1, r3, #26
 80034ba:	bf42      	ittt	mi
 80034bc:	6833      	ldrmi	r3, [r6, #0]
 80034be:	3302      	addmi	r3, #2
 80034c0:	6033      	strmi	r3, [r6, #0]
 80034c2:	6825      	ldr	r5, [r4, #0]
 80034c4:	f015 0506 	ands.w	r5, r5, #6
 80034c8:	d106      	bne.n	80034d8 <_printf_common+0x48>
 80034ca:	f104 0a19 	add.w	sl, r4, #25
 80034ce:	68e3      	ldr	r3, [r4, #12]
 80034d0:	6832      	ldr	r2, [r6, #0]
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	42ab      	cmp	r3, r5
 80034d6:	dc26      	bgt.n	8003526 <_printf_common+0x96>
 80034d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034dc:	1e13      	subs	r3, r2, #0
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	bf18      	it	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	0692      	lsls	r2, r2, #26
 80034e6:	d42b      	bmi.n	8003540 <_printf_common+0xb0>
 80034e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ec:	4649      	mov	r1, r9
 80034ee:	4638      	mov	r0, r7
 80034f0:	47c0      	blx	r8
 80034f2:	3001      	adds	r0, #1
 80034f4:	d01e      	beq.n	8003534 <_printf_common+0xa4>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	68e5      	ldr	r5, [r4, #12]
 80034fa:	6832      	ldr	r2, [r6, #0]
 80034fc:	f003 0306 	and.w	r3, r3, #6
 8003500:	2b04      	cmp	r3, #4
 8003502:	bf08      	it	eq
 8003504:	1aad      	subeq	r5, r5, r2
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	bf0c      	ite	eq
 800350c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003510:	2500      	movne	r5, #0
 8003512:	4293      	cmp	r3, r2
 8003514:	bfc4      	itt	gt
 8003516:	1a9b      	subgt	r3, r3, r2
 8003518:	18ed      	addgt	r5, r5, r3
 800351a:	2600      	movs	r6, #0
 800351c:	341a      	adds	r4, #26
 800351e:	42b5      	cmp	r5, r6
 8003520:	d11a      	bne.n	8003558 <_printf_common+0xc8>
 8003522:	2000      	movs	r0, #0
 8003524:	e008      	b.n	8003538 <_printf_common+0xa8>
 8003526:	2301      	movs	r3, #1
 8003528:	4652      	mov	r2, sl
 800352a:	4649      	mov	r1, r9
 800352c:	4638      	mov	r0, r7
 800352e:	47c0      	blx	r8
 8003530:	3001      	adds	r0, #1
 8003532:	d103      	bne.n	800353c <_printf_common+0xac>
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353c:	3501      	adds	r5, #1
 800353e:	e7c6      	b.n	80034ce <_printf_common+0x3e>
 8003540:	18e1      	adds	r1, r4, r3
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	2030      	movs	r0, #48	; 0x30
 8003546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800354a:	4422      	add	r2, r4
 800354c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003554:	3302      	adds	r3, #2
 8003556:	e7c7      	b.n	80034e8 <_printf_common+0x58>
 8003558:	2301      	movs	r3, #1
 800355a:	4622      	mov	r2, r4
 800355c:	4649      	mov	r1, r9
 800355e:	4638      	mov	r0, r7
 8003560:	47c0      	blx	r8
 8003562:	3001      	adds	r0, #1
 8003564:	d0e6      	beq.n	8003534 <_printf_common+0xa4>
 8003566:	3601      	adds	r6, #1
 8003568:	e7d9      	b.n	800351e <_printf_common+0x8e>
	...

0800356c <_printf_i>:
 800356c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	7e0f      	ldrb	r7, [r1, #24]
 8003572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003574:	2f78      	cmp	r7, #120	; 0x78
 8003576:	4691      	mov	r9, r2
 8003578:	4680      	mov	r8, r0
 800357a:	460c      	mov	r4, r1
 800357c:	469a      	mov	sl, r3
 800357e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003582:	d807      	bhi.n	8003594 <_printf_i+0x28>
 8003584:	2f62      	cmp	r7, #98	; 0x62
 8003586:	d80a      	bhi.n	800359e <_printf_i+0x32>
 8003588:	2f00      	cmp	r7, #0
 800358a:	f000 80d8 	beq.w	800373e <_printf_i+0x1d2>
 800358e:	2f58      	cmp	r7, #88	; 0x58
 8003590:	f000 80a3 	beq.w	80036da <_printf_i+0x16e>
 8003594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800359c:	e03a      	b.n	8003614 <_printf_i+0xa8>
 800359e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035a2:	2b15      	cmp	r3, #21
 80035a4:	d8f6      	bhi.n	8003594 <_printf_i+0x28>
 80035a6:	a101      	add	r1, pc, #4	; (adr r1, 80035ac <_printf_i+0x40>)
 80035a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035ac:	08003605 	.word	0x08003605
 80035b0:	08003619 	.word	0x08003619
 80035b4:	08003595 	.word	0x08003595
 80035b8:	08003595 	.word	0x08003595
 80035bc:	08003595 	.word	0x08003595
 80035c0:	08003595 	.word	0x08003595
 80035c4:	08003619 	.word	0x08003619
 80035c8:	08003595 	.word	0x08003595
 80035cc:	08003595 	.word	0x08003595
 80035d0:	08003595 	.word	0x08003595
 80035d4:	08003595 	.word	0x08003595
 80035d8:	08003725 	.word	0x08003725
 80035dc:	08003649 	.word	0x08003649
 80035e0:	08003707 	.word	0x08003707
 80035e4:	08003595 	.word	0x08003595
 80035e8:	08003595 	.word	0x08003595
 80035ec:	08003747 	.word	0x08003747
 80035f0:	08003595 	.word	0x08003595
 80035f4:	08003649 	.word	0x08003649
 80035f8:	08003595 	.word	0x08003595
 80035fc:	08003595 	.word	0x08003595
 8003600:	0800370f 	.word	0x0800370f
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	602a      	str	r2, [r5, #0]
 800360c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003614:	2301      	movs	r3, #1
 8003616:	e0a3      	b.n	8003760 <_printf_i+0x1f4>
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	6829      	ldr	r1, [r5, #0]
 800361c:	0606      	lsls	r6, r0, #24
 800361e:	f101 0304 	add.w	r3, r1, #4
 8003622:	d50a      	bpl.n	800363a <_printf_i+0xce>
 8003624:	680e      	ldr	r6, [r1, #0]
 8003626:	602b      	str	r3, [r5, #0]
 8003628:	2e00      	cmp	r6, #0
 800362a:	da03      	bge.n	8003634 <_printf_i+0xc8>
 800362c:	232d      	movs	r3, #45	; 0x2d
 800362e:	4276      	negs	r6, r6
 8003630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003634:	485e      	ldr	r0, [pc, #376]	; (80037b0 <_printf_i+0x244>)
 8003636:	230a      	movs	r3, #10
 8003638:	e019      	b.n	800366e <_printf_i+0x102>
 800363a:	680e      	ldr	r6, [r1, #0]
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003642:	bf18      	it	ne
 8003644:	b236      	sxthne	r6, r6
 8003646:	e7ef      	b.n	8003628 <_printf_i+0xbc>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	1d19      	adds	r1, r3, #4
 800364e:	6029      	str	r1, [r5, #0]
 8003650:	0601      	lsls	r1, r0, #24
 8003652:	d501      	bpl.n	8003658 <_printf_i+0xec>
 8003654:	681e      	ldr	r6, [r3, #0]
 8003656:	e002      	b.n	800365e <_printf_i+0xf2>
 8003658:	0646      	lsls	r6, r0, #25
 800365a:	d5fb      	bpl.n	8003654 <_printf_i+0xe8>
 800365c:	881e      	ldrh	r6, [r3, #0]
 800365e:	4854      	ldr	r0, [pc, #336]	; (80037b0 <_printf_i+0x244>)
 8003660:	2f6f      	cmp	r7, #111	; 0x6f
 8003662:	bf0c      	ite	eq
 8003664:	2308      	moveq	r3, #8
 8003666:	230a      	movne	r3, #10
 8003668:	2100      	movs	r1, #0
 800366a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800366e:	6865      	ldr	r5, [r4, #4]
 8003670:	60a5      	str	r5, [r4, #8]
 8003672:	2d00      	cmp	r5, #0
 8003674:	bfa2      	ittt	ge
 8003676:	6821      	ldrge	r1, [r4, #0]
 8003678:	f021 0104 	bicge.w	r1, r1, #4
 800367c:	6021      	strge	r1, [r4, #0]
 800367e:	b90e      	cbnz	r6, 8003684 <_printf_i+0x118>
 8003680:	2d00      	cmp	r5, #0
 8003682:	d04d      	beq.n	8003720 <_printf_i+0x1b4>
 8003684:	4615      	mov	r5, r2
 8003686:	fbb6 f1f3 	udiv	r1, r6, r3
 800368a:	fb03 6711 	mls	r7, r3, r1, r6
 800368e:	5dc7      	ldrb	r7, [r0, r7]
 8003690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003694:	4637      	mov	r7, r6
 8003696:	42bb      	cmp	r3, r7
 8003698:	460e      	mov	r6, r1
 800369a:	d9f4      	bls.n	8003686 <_printf_i+0x11a>
 800369c:	2b08      	cmp	r3, #8
 800369e:	d10b      	bne.n	80036b8 <_printf_i+0x14c>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	07de      	lsls	r6, r3, #31
 80036a4:	d508      	bpl.n	80036b8 <_printf_i+0x14c>
 80036a6:	6923      	ldr	r3, [r4, #16]
 80036a8:	6861      	ldr	r1, [r4, #4]
 80036aa:	4299      	cmp	r1, r3
 80036ac:	bfde      	ittt	le
 80036ae:	2330      	movle	r3, #48	; 0x30
 80036b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036b8:	1b52      	subs	r2, r2, r5
 80036ba:	6122      	str	r2, [r4, #16]
 80036bc:	f8cd a000 	str.w	sl, [sp]
 80036c0:	464b      	mov	r3, r9
 80036c2:	aa03      	add	r2, sp, #12
 80036c4:	4621      	mov	r1, r4
 80036c6:	4640      	mov	r0, r8
 80036c8:	f7ff fee2 	bl	8003490 <_printf_common>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d14c      	bne.n	800376a <_printf_i+0x1fe>
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	b004      	add	sp, #16
 80036d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036da:	4835      	ldr	r0, [pc, #212]	; (80037b0 <_printf_i+0x244>)
 80036dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036e0:	6829      	ldr	r1, [r5, #0]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036e8:	6029      	str	r1, [r5, #0]
 80036ea:	061d      	lsls	r5, r3, #24
 80036ec:	d514      	bpl.n	8003718 <_printf_i+0x1ac>
 80036ee:	07df      	lsls	r7, r3, #31
 80036f0:	bf44      	itt	mi
 80036f2:	f043 0320 	orrmi.w	r3, r3, #32
 80036f6:	6023      	strmi	r3, [r4, #0]
 80036f8:	b91e      	cbnz	r6, 8003702 <_printf_i+0x196>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	f023 0320 	bic.w	r3, r3, #32
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	2310      	movs	r3, #16
 8003704:	e7b0      	b.n	8003668 <_printf_i+0xfc>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f043 0320 	orr.w	r3, r3, #32
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	2378      	movs	r3, #120	; 0x78
 8003710:	4828      	ldr	r0, [pc, #160]	; (80037b4 <_printf_i+0x248>)
 8003712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003716:	e7e3      	b.n	80036e0 <_printf_i+0x174>
 8003718:	0659      	lsls	r1, r3, #25
 800371a:	bf48      	it	mi
 800371c:	b2b6      	uxthmi	r6, r6
 800371e:	e7e6      	b.n	80036ee <_printf_i+0x182>
 8003720:	4615      	mov	r5, r2
 8003722:	e7bb      	b.n	800369c <_printf_i+0x130>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6826      	ldr	r6, [r4, #0]
 8003728:	6961      	ldr	r1, [r4, #20]
 800372a:	1d18      	adds	r0, r3, #4
 800372c:	6028      	str	r0, [r5, #0]
 800372e:	0635      	lsls	r5, r6, #24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	d501      	bpl.n	8003738 <_printf_i+0x1cc>
 8003734:	6019      	str	r1, [r3, #0]
 8003736:	e002      	b.n	800373e <_printf_i+0x1d2>
 8003738:	0670      	lsls	r0, r6, #25
 800373a:	d5fb      	bpl.n	8003734 <_printf_i+0x1c8>
 800373c:	8019      	strh	r1, [r3, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	4615      	mov	r5, r2
 8003744:	e7ba      	b.n	80036bc <_printf_i+0x150>
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	602a      	str	r2, [r5, #0]
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	2100      	movs	r1, #0
 8003752:	4628      	mov	r0, r5
 8003754:	f7fc fd5c 	bl	8000210 <memchr>
 8003758:	b108      	cbz	r0, 800375e <_printf_i+0x1f2>
 800375a:	1b40      	subs	r0, r0, r5
 800375c:	6060      	str	r0, [r4, #4]
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	2300      	movs	r3, #0
 8003764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003768:	e7a8      	b.n	80036bc <_printf_i+0x150>
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	462a      	mov	r2, r5
 800376e:	4649      	mov	r1, r9
 8003770:	4640      	mov	r0, r8
 8003772:	47d0      	blx	sl
 8003774:	3001      	adds	r0, #1
 8003776:	d0ab      	beq.n	80036d0 <_printf_i+0x164>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	079b      	lsls	r3, r3, #30
 800377c:	d413      	bmi.n	80037a6 <_printf_i+0x23a>
 800377e:	68e0      	ldr	r0, [r4, #12]
 8003780:	9b03      	ldr	r3, [sp, #12]
 8003782:	4298      	cmp	r0, r3
 8003784:	bfb8      	it	lt
 8003786:	4618      	movlt	r0, r3
 8003788:	e7a4      	b.n	80036d4 <_printf_i+0x168>
 800378a:	2301      	movs	r3, #1
 800378c:	4632      	mov	r2, r6
 800378e:	4649      	mov	r1, r9
 8003790:	4640      	mov	r0, r8
 8003792:	47d0      	blx	sl
 8003794:	3001      	adds	r0, #1
 8003796:	d09b      	beq.n	80036d0 <_printf_i+0x164>
 8003798:	3501      	adds	r5, #1
 800379a:	68e3      	ldr	r3, [r4, #12]
 800379c:	9903      	ldr	r1, [sp, #12]
 800379e:	1a5b      	subs	r3, r3, r1
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	dcf2      	bgt.n	800378a <_printf_i+0x21e>
 80037a4:	e7eb      	b.n	800377e <_printf_i+0x212>
 80037a6:	2500      	movs	r5, #0
 80037a8:	f104 0619 	add.w	r6, r4, #25
 80037ac:	e7f5      	b.n	800379a <_printf_i+0x22e>
 80037ae:	bf00      	nop
 80037b0:	08003e61 	.word	0x08003e61
 80037b4:	08003e72 	.word	0x08003e72

080037b8 <_sbrk_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d06      	ldr	r5, [pc, #24]	; (80037d4 <_sbrk_r+0x1c>)
 80037bc:	2300      	movs	r3, #0
 80037be:	4604      	mov	r4, r0
 80037c0:	4608      	mov	r0, r1
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	f7fd fa20 	bl	8000c08 <_sbrk>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_sbrk_r+0x1a>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_sbrk_r+0x1a>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	200005f0 	.word	0x200005f0

080037d8 <__sread>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	460c      	mov	r4, r1
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	f000 fab2 	bl	8003d48 <_read_r>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	bfab      	itete	ge
 80037e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ea:	89a3      	ldrhlt	r3, [r4, #12]
 80037ec:	181b      	addge	r3, r3, r0
 80037ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037f2:	bfac      	ite	ge
 80037f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037f6:	81a3      	strhlt	r3, [r4, #12]
 80037f8:	bd10      	pop	{r4, pc}

080037fa <__swrite>:
 80037fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fe:	461f      	mov	r7, r3
 8003800:	898b      	ldrh	r3, [r1, #12]
 8003802:	05db      	lsls	r3, r3, #23
 8003804:	4605      	mov	r5, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4616      	mov	r6, r2
 800380a:	d505      	bpl.n	8003818 <__swrite+0x1e>
 800380c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003810:	2302      	movs	r3, #2
 8003812:	2200      	movs	r2, #0
 8003814:	f000 f9c8 	bl	8003ba8 <_lseek_r>
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	4632      	mov	r2, r6
 8003826:	463b      	mov	r3, r7
 8003828:	4628      	mov	r0, r5
 800382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	f000 b869 	b.w	8003904 <_write_r>

08003832 <__sseek>:
 8003832:	b510      	push	{r4, lr}
 8003834:	460c      	mov	r4, r1
 8003836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800383a:	f000 f9b5 	bl	8003ba8 <_lseek_r>
 800383e:	1c43      	adds	r3, r0, #1
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	bf15      	itete	ne
 8003844:	6560      	strne	r0, [r4, #84]	; 0x54
 8003846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800384a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800384e:	81a3      	strheq	r3, [r4, #12]
 8003850:	bf18      	it	ne
 8003852:	81a3      	strhne	r3, [r4, #12]
 8003854:	bd10      	pop	{r4, pc}

08003856 <__sclose>:
 8003856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385a:	f000 b8d3 	b.w	8003a04 <_close_r>
	...

08003860 <__swbuf_r>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	460e      	mov	r6, r1
 8003864:	4614      	mov	r4, r2
 8003866:	4605      	mov	r5, r0
 8003868:	b118      	cbz	r0, 8003872 <__swbuf_r+0x12>
 800386a:	6983      	ldr	r3, [r0, #24]
 800386c:	b90b      	cbnz	r3, 8003872 <__swbuf_r+0x12>
 800386e:	f7ff fb81 	bl	8002f74 <__sinit>
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <__swbuf_r+0x98>)
 8003874:	429c      	cmp	r4, r3
 8003876:	d12b      	bne.n	80038d0 <__swbuf_r+0x70>
 8003878:	686c      	ldr	r4, [r5, #4]
 800387a:	69a3      	ldr	r3, [r4, #24]
 800387c:	60a3      	str	r3, [r4, #8]
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	071a      	lsls	r2, r3, #28
 8003882:	d52f      	bpl.n	80038e4 <__swbuf_r+0x84>
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	b36b      	cbz	r3, 80038e4 <__swbuf_r+0x84>
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	1ac0      	subs	r0, r0, r3
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	b2f6      	uxtb	r6, r6
 8003892:	4283      	cmp	r3, r0
 8003894:	4637      	mov	r7, r6
 8003896:	dc04      	bgt.n	80038a2 <__swbuf_r+0x42>
 8003898:	4621      	mov	r1, r4
 800389a:	4628      	mov	r0, r5
 800389c:	f000 f948 	bl	8003b30 <_fflush_r>
 80038a0:	bb30      	cbnz	r0, 80038f0 <__swbuf_r+0x90>
 80038a2:	68a3      	ldr	r3, [r4, #8]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60a3      	str	r3, [r4, #8]
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	6022      	str	r2, [r4, #0]
 80038ae:	701e      	strb	r6, [r3, #0]
 80038b0:	6963      	ldr	r3, [r4, #20]
 80038b2:	3001      	adds	r0, #1
 80038b4:	4283      	cmp	r3, r0
 80038b6:	d004      	beq.n	80038c2 <__swbuf_r+0x62>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	07db      	lsls	r3, r3, #31
 80038bc:	d506      	bpl.n	80038cc <__swbuf_r+0x6c>
 80038be:	2e0a      	cmp	r6, #10
 80038c0:	d104      	bne.n	80038cc <__swbuf_r+0x6c>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 f933 	bl	8003b30 <_fflush_r>
 80038ca:	b988      	cbnz	r0, 80038f0 <__swbuf_r+0x90>
 80038cc:	4638      	mov	r0, r7
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <__swbuf_r+0x9c>)
 80038d2:	429c      	cmp	r4, r3
 80038d4:	d101      	bne.n	80038da <__swbuf_r+0x7a>
 80038d6:	68ac      	ldr	r4, [r5, #8]
 80038d8:	e7cf      	b.n	800387a <__swbuf_r+0x1a>
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <__swbuf_r+0xa0>)
 80038dc:	429c      	cmp	r4, r3
 80038de:	bf08      	it	eq
 80038e0:	68ec      	ldreq	r4, [r5, #12]
 80038e2:	e7ca      	b.n	800387a <__swbuf_r+0x1a>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 f81e 	bl	8003928 <__swsetup_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d0cb      	beq.n	8003888 <__swbuf_r+0x28>
 80038f0:	f04f 37ff 	mov.w	r7, #4294967295
 80038f4:	e7ea      	b.n	80038cc <__swbuf_r+0x6c>
 80038f6:	bf00      	nop
 80038f8:	08003e10 	.word	0x08003e10
 80038fc:	08003e30 	.word	0x08003e30
 8003900:	08003df0 	.word	0x08003df0

08003904 <_write_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_write_r+0x20>)
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	602a      	str	r2, [r5, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd f927 	bl	8000b66 <_write>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_write_r+0x1e>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_write_r+0x1e>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200005f0 	.word	0x200005f0

08003928 <__swsetup_r>:
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <__swsetup_r+0xcc>)
 800392a:	b570      	push	{r4, r5, r6, lr}
 800392c:	681d      	ldr	r5, [r3, #0]
 800392e:	4606      	mov	r6, r0
 8003930:	460c      	mov	r4, r1
 8003932:	b125      	cbz	r5, 800393e <__swsetup_r+0x16>
 8003934:	69ab      	ldr	r3, [r5, #24]
 8003936:	b913      	cbnz	r3, 800393e <__swsetup_r+0x16>
 8003938:	4628      	mov	r0, r5
 800393a:	f7ff fb1b 	bl	8002f74 <__sinit>
 800393e:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <__swsetup_r+0xd0>)
 8003940:	429c      	cmp	r4, r3
 8003942:	d10f      	bne.n	8003964 <__swsetup_r+0x3c>
 8003944:	686c      	ldr	r4, [r5, #4]
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800394c:	0719      	lsls	r1, r3, #28
 800394e:	d42c      	bmi.n	80039aa <__swsetup_r+0x82>
 8003950:	06dd      	lsls	r5, r3, #27
 8003952:	d411      	bmi.n	8003978 <__swsetup_r+0x50>
 8003954:	2309      	movs	r3, #9
 8003956:	6033      	str	r3, [r6, #0]
 8003958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	f04f 30ff 	mov.w	r0, #4294967295
 8003962:	e03e      	b.n	80039e2 <__swsetup_r+0xba>
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <__swsetup_r+0xd4>)
 8003966:	429c      	cmp	r4, r3
 8003968:	d101      	bne.n	800396e <__swsetup_r+0x46>
 800396a:	68ac      	ldr	r4, [r5, #8]
 800396c:	e7eb      	b.n	8003946 <__swsetup_r+0x1e>
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <__swsetup_r+0xd8>)
 8003970:	429c      	cmp	r4, r3
 8003972:	bf08      	it	eq
 8003974:	68ec      	ldreq	r4, [r5, #12]
 8003976:	e7e6      	b.n	8003946 <__swsetup_r+0x1e>
 8003978:	0758      	lsls	r0, r3, #29
 800397a:	d512      	bpl.n	80039a2 <__swsetup_r+0x7a>
 800397c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397e:	b141      	cbz	r1, 8003992 <__swsetup_r+0x6a>
 8003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <__swsetup_r+0x66>
 8003988:	4630      	mov	r0, r6
 800398a:	f000 f991 	bl	8003cb0 <_free_r>
 800398e:	2300      	movs	r3, #0
 8003990:	6363      	str	r3, [r4, #52]	; 0x34
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	2300      	movs	r3, #0
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	b94b      	cbnz	r3, 80039c2 <__swsetup_r+0x9a>
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d003      	beq.n	80039c2 <__swsetup_r+0x9a>
 80039ba:	4621      	mov	r1, r4
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 f92b 	bl	8003c18 <__smakebuf_r>
 80039c2:	89a0      	ldrh	r0, [r4, #12]
 80039c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039c8:	f010 0301 	ands.w	r3, r0, #1
 80039cc:	d00a      	beq.n	80039e4 <__swsetup_r+0xbc>
 80039ce:	2300      	movs	r3, #0
 80039d0:	60a3      	str	r3, [r4, #8]
 80039d2:	6963      	ldr	r3, [r4, #20]
 80039d4:	425b      	negs	r3, r3
 80039d6:	61a3      	str	r3, [r4, #24]
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	b943      	cbnz	r3, 80039ee <__swsetup_r+0xc6>
 80039dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039e0:	d1ba      	bne.n	8003958 <__swsetup_r+0x30>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	0781      	lsls	r1, r0, #30
 80039e6:	bf58      	it	pl
 80039e8:	6963      	ldrpl	r3, [r4, #20]
 80039ea:	60a3      	str	r3, [r4, #8]
 80039ec:	e7f4      	b.n	80039d8 <__swsetup_r+0xb0>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e7f7      	b.n	80039e2 <__swsetup_r+0xba>
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	08003e10 	.word	0x08003e10
 80039fc:	08003e30 	.word	0x08003e30
 8003a00:	08003df0 	.word	0x08003df0

08003a04 <_close_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d06      	ldr	r5, [pc, #24]	; (8003a20 <_close_r+0x1c>)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	f7fd f8c5 	bl	8000b9e <_close>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_close_r+0x1a>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_close_r+0x1a>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	200005f0 	.word	0x200005f0

08003a24 <__sflush_r>:
 8003a24:	898a      	ldrh	r2, [r1, #12]
 8003a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	0710      	lsls	r0, r2, #28
 8003a2e:	460c      	mov	r4, r1
 8003a30:	d458      	bmi.n	8003ae4 <__sflush_r+0xc0>
 8003a32:	684b      	ldr	r3, [r1, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dc05      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dc02      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a46:	2e00      	cmp	r6, #0
 8003a48:	d0f9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a50:	682f      	ldr	r7, [r5, #0]
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	d032      	beq.n	8003abc <__sflush_r+0x98>
 8003a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	075a      	lsls	r2, r3, #29
 8003a5c:	d505      	bpl.n	8003a6a <__sflush_r+0x46>
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a64:	b10b      	cbz	r3, 8003a6a <__sflush_r+0x46>
 8003a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a68:	1ac0      	subs	r0, r0, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a70:	6a21      	ldr	r1, [r4, #32]
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b0      	blx	r6
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	d106      	bne.n	8003a8a <__sflush_r+0x66>
 8003a7c:	6829      	ldr	r1, [r5, #0]
 8003a7e:	291d      	cmp	r1, #29
 8003a80:	d82c      	bhi.n	8003adc <__sflush_r+0xb8>
 8003a82:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <__sflush_r+0x108>)
 8003a84:	40ca      	lsrs	r2, r1
 8003a86:	07d6      	lsls	r6, r2, #31
 8003a88:	d528      	bpl.n	8003adc <__sflush_r+0xb8>
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	6062      	str	r2, [r4, #4]
 8003a8e:	04d9      	lsls	r1, r3, #19
 8003a90:	6922      	ldr	r2, [r4, #16]
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	d504      	bpl.n	8003aa0 <__sflush_r+0x7c>
 8003a96:	1c42      	adds	r2, r0, #1
 8003a98:	d101      	bne.n	8003a9e <__sflush_r+0x7a>
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	b903      	cbnz	r3, 8003aa0 <__sflush_r+0x7c>
 8003a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8003aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa2:	602f      	str	r7, [r5, #0]
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d0ca      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aac:	4299      	cmp	r1, r3
 8003aae:	d002      	beq.n	8003ab6 <__sflush_r+0x92>
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f8fd 	bl	8003cb0 <_free_r>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8003aba:	e7c1      	b.n	8003a40 <__sflush_r+0x1c>
 8003abc:	6a21      	ldr	r1, [r4, #32]
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b0      	blx	r6
 8003ac4:	1c41      	adds	r1, r0, #1
 8003ac6:	d1c7      	bne.n	8003a58 <__sflush_r+0x34>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c4      	beq.n	8003a58 <__sflush_r+0x34>
 8003ace:	2b1d      	cmp	r3, #29
 8003ad0:	d001      	beq.n	8003ad6 <__sflush_r+0xb2>
 8003ad2:	2b16      	cmp	r3, #22
 8003ad4:	d101      	bne.n	8003ada <__sflush_r+0xb6>
 8003ad6:	602f      	str	r7, [r5, #0]
 8003ad8:	e7b1      	b.n	8003a3e <__sflush_r+0x1a>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	e7ad      	b.n	8003a40 <__sflush_r+0x1c>
 8003ae4:	690f      	ldr	r7, [r1, #16]
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d0a9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aea:	0793      	lsls	r3, r2, #30
 8003aec:	680e      	ldr	r6, [r1, #0]
 8003aee:	bf08      	it	eq
 8003af0:	694b      	ldreq	r3, [r1, #20]
 8003af2:	600f      	str	r7, [r1, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2300      	movne	r3, #0
 8003af8:	eba6 0807 	sub.w	r8, r6, r7
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	f1b8 0f00 	cmp.w	r8, #0
 8003b02:	dd9c      	ble.n	8003a3e <__sflush_r+0x1a>
 8003b04:	6a21      	ldr	r1, [r4, #32]
 8003b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b08:	4643      	mov	r3, r8
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b0      	blx	r6
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dc06      	bgt.n	8003b22 <__sflush_r+0xfe>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	e78e      	b.n	8003a40 <__sflush_r+0x1c>
 8003b22:	4407      	add	r7, r0
 8003b24:	eba8 0800 	sub.w	r8, r8, r0
 8003b28:	e7e9      	b.n	8003afe <__sflush_r+0xda>
 8003b2a:	bf00      	nop
 8003b2c:	20400001 	.word	0x20400001

08003b30 <_fflush_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	4605      	mov	r5, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b913      	cbnz	r3, 8003b40 <_fflush_r+0x10>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	b118      	cbz	r0, 8003b4a <_fflush_r+0x1a>
 8003b42:	6983      	ldr	r3, [r0, #24]
 8003b44:	b90b      	cbnz	r3, 8003b4a <_fflush_r+0x1a>
 8003b46:	f7ff fa15 	bl	8002f74 <__sinit>
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <_fflush_r+0x6c>)
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d11b      	bne.n	8003b88 <_fflush_r+0x58>
 8003b50:	686c      	ldr	r4, [r5, #4]
 8003b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ef      	beq.n	8003b3a <_fflush_r+0xa>
 8003b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b5c:	07d0      	lsls	r0, r2, #31
 8003b5e:	d404      	bmi.n	8003b6a <_fflush_r+0x3a>
 8003b60:	0599      	lsls	r1, r3, #22
 8003b62:	d402      	bmi.n	8003b6a <_fflush_r+0x3a>
 8003b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b66:	f7ff faa3 	bl	80030b0 <__retarget_lock_acquire_recursive>
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f7ff ff59 	bl	8003a24 <__sflush_r>
 8003b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b74:	07da      	lsls	r2, r3, #31
 8003b76:	4605      	mov	r5, r0
 8003b78:	d4e0      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	d4dd      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b82:	f7ff fa96 	bl	80030b2 <__retarget_lock_release_recursive>
 8003b86:	e7d9      	b.n	8003b3c <_fflush_r+0xc>
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <_fflush_r+0x70>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d101      	bne.n	8003b92 <_fflush_r+0x62>
 8003b8e:	68ac      	ldr	r4, [r5, #8]
 8003b90:	e7df      	b.n	8003b52 <_fflush_r+0x22>
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <_fflush_r+0x74>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	bf08      	it	eq
 8003b98:	68ec      	ldreq	r4, [r5, #12]
 8003b9a:	e7da      	b.n	8003b52 <_fflush_r+0x22>
 8003b9c:	08003e10 	.word	0x08003e10
 8003ba0:	08003e30 	.word	0x08003e30
 8003ba4:	08003df0 	.word	0x08003df0

08003ba8 <_lseek_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d07      	ldr	r5, [pc, #28]	; (8003bc8 <_lseek_r+0x20>)
 8003bac:	4604      	mov	r4, r0
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	602a      	str	r2, [r5, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f7fd f818 	bl	8000bec <_lseek>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_lseek_r+0x1e>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_lseek_r+0x1e>
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	200005f0 	.word	0x200005f0

08003bcc <__swhatbuf_r>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	460e      	mov	r6, r1
 8003bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	b096      	sub	sp, #88	; 0x58
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	da08      	bge.n	8003bf0 <__swhatbuf_r+0x24>
 8003bde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	061a      	lsls	r2, r3, #24
 8003be8:	d410      	bmi.n	8003c0c <__swhatbuf_r+0x40>
 8003bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bee:	e00e      	b.n	8003c0e <__swhatbuf_r+0x42>
 8003bf0:	466a      	mov	r2, sp
 8003bf2:	f000 f8bb 	bl	8003d6c <_fstat_r>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	dbf1      	blt.n	8003bde <__swhatbuf_r+0x12>
 8003bfa:	9a01      	ldr	r2, [sp, #4]
 8003bfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c04:	425a      	negs	r2, r3
 8003c06:	415a      	adcs	r2, r3
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	e7ee      	b.n	8003bea <__swhatbuf_r+0x1e>
 8003c0c:	2340      	movs	r3, #64	; 0x40
 8003c0e:	2000      	movs	r0, #0
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	b016      	add	sp, #88	; 0x58
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c18 <__smakebuf_r>:
 8003c18:	898b      	ldrh	r3, [r1, #12]
 8003c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c1c:	079d      	lsls	r5, r3, #30
 8003c1e:	4606      	mov	r6, r0
 8003c20:	460c      	mov	r4, r1
 8003c22:	d507      	bpl.n	8003c34 <__smakebuf_r+0x1c>
 8003c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	6163      	str	r3, [r4, #20]
 8003c30:	b002      	add	sp, #8
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	ab01      	add	r3, sp, #4
 8003c36:	466a      	mov	r2, sp
 8003c38:	f7ff ffc8 	bl	8003bcc <__swhatbuf_r>
 8003c3c:	9900      	ldr	r1, [sp, #0]
 8003c3e:	4605      	mov	r5, r0
 8003c40:	4630      	mov	r0, r6
 8003c42:	f7ff fa57 	bl	80030f4 <_malloc_r>
 8003c46:	b948      	cbnz	r0, 8003c5c <__smakebuf_r+0x44>
 8003c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4c:	059a      	lsls	r2, r3, #22
 8003c4e:	d4ef      	bmi.n	8003c30 <__smakebuf_r+0x18>
 8003c50:	f023 0303 	bic.w	r3, r3, #3
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	e7e3      	b.n	8003c24 <__smakebuf_r+0xc>
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <__smakebuf_r+0x7c>)
 8003c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	6020      	str	r0, [r4, #0]
 8003c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c68:	81a3      	strh	r3, [r4, #12]
 8003c6a:	9b00      	ldr	r3, [sp, #0]
 8003c6c:	6163      	str	r3, [r4, #20]
 8003c6e:	9b01      	ldr	r3, [sp, #4]
 8003c70:	6120      	str	r0, [r4, #16]
 8003c72:	b15b      	cbz	r3, 8003c8c <__smakebuf_r+0x74>
 8003c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f889 	bl	8003d90 <_isatty_r>
 8003c7e:	b128      	cbz	r0, 8003c8c <__smakebuf_r+0x74>
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	81a3      	strh	r3, [r4, #12]
 8003c8c:	89a0      	ldrh	r0, [r4, #12]
 8003c8e:	4305      	orrs	r5, r0
 8003c90:	81a5      	strh	r5, [r4, #12]
 8003c92:	e7cd      	b.n	8003c30 <__smakebuf_r+0x18>
 8003c94:	08002f0d 	.word	0x08002f0d

08003c98 <__malloc_lock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	; (8003ca0 <__malloc_lock+0x8>)
 8003c9a:	f7ff ba09 	b.w	80030b0 <__retarget_lock_acquire_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200005e4 	.word	0x200005e4

08003ca4 <__malloc_unlock>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__malloc_unlock+0x8>)
 8003ca6:	f7ff ba04 	b.w	80030b2 <__retarget_lock_release_recursive>
 8003caa:	bf00      	nop
 8003cac:	200005e4 	.word	0x200005e4

08003cb0 <_free_r>:
 8003cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cb2:	2900      	cmp	r1, #0
 8003cb4:	d044      	beq.n	8003d40 <_free_r+0x90>
 8003cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cba:	9001      	str	r0, [sp, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8003cc2:	bfb8      	it	lt
 8003cc4:	18e4      	addlt	r4, r4, r3
 8003cc6:	f7ff ffe7 	bl	8003c98 <__malloc_lock>
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <_free_r+0x94>)
 8003ccc:	9801      	ldr	r0, [sp, #4]
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	b933      	cbnz	r3, 8003ce0 <_free_r+0x30>
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	6014      	str	r4, [r2, #0]
 8003cd6:	b003      	add	sp, #12
 8003cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cdc:	f7ff bfe2 	b.w	8003ca4 <__malloc_unlock>
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d908      	bls.n	8003cf6 <_free_r+0x46>
 8003ce4:	6825      	ldr	r5, [r4, #0]
 8003ce6:	1961      	adds	r1, r4, r5
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	bf01      	itttt	eq
 8003cec:	6819      	ldreq	r1, [r3, #0]
 8003cee:	685b      	ldreq	r3, [r3, #4]
 8003cf0:	1949      	addeq	r1, r1, r5
 8003cf2:	6021      	streq	r1, [r4, #0]
 8003cf4:	e7ed      	b.n	8003cd2 <_free_r+0x22>
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	b10b      	cbz	r3, 8003d00 <_free_r+0x50>
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d9fa      	bls.n	8003cf6 <_free_r+0x46>
 8003d00:	6811      	ldr	r1, [r2, #0]
 8003d02:	1855      	adds	r5, r2, r1
 8003d04:	42a5      	cmp	r5, r4
 8003d06:	d10b      	bne.n	8003d20 <_free_r+0x70>
 8003d08:	6824      	ldr	r4, [r4, #0]
 8003d0a:	4421      	add	r1, r4
 8003d0c:	1854      	adds	r4, r2, r1
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	6011      	str	r1, [r2, #0]
 8003d12:	d1e0      	bne.n	8003cd6 <_free_r+0x26>
 8003d14:	681c      	ldr	r4, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	6053      	str	r3, [r2, #4]
 8003d1a:	4421      	add	r1, r4
 8003d1c:	6011      	str	r1, [r2, #0]
 8003d1e:	e7da      	b.n	8003cd6 <_free_r+0x26>
 8003d20:	d902      	bls.n	8003d28 <_free_r+0x78>
 8003d22:	230c      	movs	r3, #12
 8003d24:	6003      	str	r3, [r0, #0]
 8003d26:	e7d6      	b.n	8003cd6 <_free_r+0x26>
 8003d28:	6825      	ldr	r5, [r4, #0]
 8003d2a:	1961      	adds	r1, r4, r5
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	bf04      	itt	eq
 8003d30:	6819      	ldreq	r1, [r3, #0]
 8003d32:	685b      	ldreq	r3, [r3, #4]
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	bf04      	itt	eq
 8003d38:	1949      	addeq	r1, r1, r5
 8003d3a:	6021      	streq	r1, [r4, #0]
 8003d3c:	6054      	str	r4, [r2, #4]
 8003d3e:	e7ca      	b.n	8003cd6 <_free_r+0x26>
 8003d40:	b003      	add	sp, #12
 8003d42:	bd30      	pop	{r4, r5, pc}
 8003d44:	200005e8 	.word	0x200005e8

08003d48 <_read_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4d07      	ldr	r5, [pc, #28]	; (8003d68 <_read_r+0x20>)
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	4608      	mov	r0, r1
 8003d50:	4611      	mov	r1, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	602a      	str	r2, [r5, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7fc fee8 	bl	8000b2c <_read>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_read_r+0x1e>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_read_r+0x1e>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	200005f0 	.word	0x200005f0

08003d6c <_fstat_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4d07      	ldr	r5, [pc, #28]	; (8003d8c <_fstat_r+0x20>)
 8003d70:	2300      	movs	r3, #0
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	f7fc ff1c 	bl	8000bb6 <_fstat>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	d102      	bne.n	8003d88 <_fstat_r+0x1c>
 8003d82:	682b      	ldr	r3, [r5, #0]
 8003d84:	b103      	cbz	r3, 8003d88 <_fstat_r+0x1c>
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200005f0 	.word	0x200005f0

08003d90 <_isatty_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d06      	ldr	r5, [pc, #24]	; (8003dac <_isatty_r+0x1c>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fc ff1b 	bl	8000bd6 <_isatty>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_isatty_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_isatty_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200005f0 	.word	0x200005f0

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
